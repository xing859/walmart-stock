import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import pywt
from scipy.stats import zscore
from datetime import datetime

# 设置 matplotlib 支持中文
plt.rcParams['font.family'] = 'SimHei'  # 使用黑体字体，可根据系统情况修改
plt.rcParams['axes.unicode_minus'] = False  # 解决负号显示问题

# ---------------------- 1. 数据加载与预处理 ----------------------
# 加载数据（假设数据文件与代码同目录，文件名为 walmart_stock.csv）
data = pd.read_csv('walmart_stock.csv')

# 找到日期列（根据实际情况修改列名）
date_column = 'date'  # 这里假设日期列名为 'date'，请根据实际情况修改
if date_column in data.columns:
    # 将日期列转换为带时区信息的 datetime 类型
    data[date_column] = pd.to_datetime(data[date_column], utc=True)

    # 重命名列
    data = data.rename(columns={date_column: 'date', 'Open': 'open', 'High': 'high',
                                'Low': 'low', 'Close': 'close', 'Volume': 'volume'})

    # 处理缺失值（向前填充，或删除含缺失的行，此处假设数据完整，仅演示）
    data = data.dropna()  # 若有少量缺失，可改用 data.fillna(method='ffill')

    # 异常值检测（成交量 Z-score 法）
    data['z_score_volume'] = zscore(data['volume'])
    data = data[data['z_score_volume'].abs() < 3]  # 删除 Z-score>3 的异常值
    data = data.drop(columns=['z_score_volume'])  # 删除临时列

    # 设置日期列为索引
    data.set_index('date', inplace=True)

    # 移除时区信息（如果需要）
    data.index = data.index.tz_localize(None)
else:
    print(f"未找到日期列: {date_column}，请检查列名。")
    exit()

# ---------------------- 2. 维度规约：主成分分析（PCA） ----------------------
# 提取数值特征
numeric_features = data[['open', 'high', 'low', 'close', 'volume']]

# 数据标准化
scaler = StandardScaler()
scaled_data = scaler.fit_transform(numeric_features)

# 应用 PCA
pca = PCA(n_components=2)  # 保留前 2 个主成分
principal_components = pca.fit_transform(scaled_data)

# 计算方差贡献率
explained_variance_ratio = pca.explained_variance_ratio_
cumulative_variance = np.cumsum(explained_variance_ratio)

# 可视化碎石图
plt.figure(figsize=(10, 5))
plt.plot(range(1, len(explained_variance_ratio)+1),
         cumulative_variance, marker='o', linestyle='--', color='b')
plt.title('PCA 碎石图 - 累计方差贡献率')
plt.xlabel('主成分数量')
plt.ylabel('累计方差贡献率')
plt.xticks(range(1, len(explained_variance_ratio)+1))
plt.grid(True)
plt.show()

# ---------------------- 3. 数据压缩：分箱与小波变换 ----------------------
# 3.1 分箱处理（等宽分箱与等频分箱）
# 等宽分箱（收盘价）
data['close_bin_equwidth'] = pd.cut(data['close'], bins=5, labels=False)  # 0 - 4 类

# 等频分箱（成交量）
data['volume_bin_equfreq'] = pd.qcut(data['volume'], q=3, labels=False)  # 0 - 2 类

# 3.2 小波变换（收盘价序列压缩）
close_series = data['close'].values
# 小波分解（使用 db1 小波，分解 1 层）
coeffs = pywt.dwt(close_series, 'db1')
approx_component, detail_component = coeffs  # 近似分量（低频）和细节分量（高频）

# 重构（仅保留近似分量，实现压缩）
compressed_close = pywt.idwt(approx_component, np.zeros_like(detail_component), 'db1')
compressed_close = compressed_close[:len(close_series)]  # 处理长度匹配问题

# 计算均方误差（MSE）
mse = mean_squared_error(close_series, compressed_close)
print(f"小波变换 MSE: {mse:.4f}")

# ---------------------- 4. 数值规约：回归分析与直方图 ----------------------
# 4.1 回归分析（收盘价 vs 成交量）
X = data[['volume']].values
y = data['close'].values

model = LinearRegression()
model.fit(X, y)
r_squared = model.score(X, y)
print(f"回归模型 R²: {r_squared:.4f}")

# 4.2 直方图归纳（最高价和最低价）
data['high_hist'] = pd.cut(data['high'], bins=5, labels=False)  # 0 - 4 类
data['low_hist'] = pd.cut(data['low'], bins=5, labels=False)   # 0 - 4 类

# ---------------------- 5. 数据离散化：时间维度 ----------------------
data['year'] = data.index.year
data['month'] = data.index.month
data['quarter'] = data.index.quarter

# ---------------------- 6. 结果可视化与输出 ----------------------
# 6.1 PCA 结果可视化（二维主成分分布）
plt.figure(figsize=(10, 6))
sns.scatterplot(x=principal_components[:, 0], y=principal_components[:, 1],
                hue=data.index.year, palette='viridis', alpha=0.6)
plt.title('主成分分析结果 - 二维数据分布')
plt.xlabel(f'主成分 1 (方差贡献率: {explained_variance_ratio[0]:.4f})')
plt.ylabel(f'主成分 2 (方差贡献率: {explained_variance_ratio[1]:.4f})')
plt.legend(title='年份', bbox_to_anchor=(1, 1))
plt.show()

# 6.2 小波变换前后对比
plt.figure(figsize=(12, 6))
plt.plot(data.index, close_series, label='原始收盘价', alpha=0.6)
plt.plot(data.index, compressed_close, label=f'压缩后收盘价 (MSE={mse:.4f})', linestyle='--', color='red')
plt.title('小波变换数据压缩效果对比')
plt.xlabel('日期')
plt.ylabel('价格')
plt.legend()
plt.show()

# 6.3 保存处理后的数据
processed_data = data.copy()
processed_data['pca_component1'] = principal_components[:, 0]
processed_data['pca_component2'] = principal_components[:, 1]
processed_data.to_csv('processed_walmart_stock.csv', index=True)

print("数据规约处理完成，结果已保存至 processed_walmart_stock.csv")    
